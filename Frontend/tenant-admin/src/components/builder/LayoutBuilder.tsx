import React from 'react';
import { Form, Input, InputNumber, Switch, Select, Card, Divider, ColorPicker, Button, Space } from 'antd';
import { PlusOutlined, DeleteOutlined } from '@ant-design/icons';
import type { Color } from 'antd/es/color-picker';

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
const colorPresets = [
  { label: 'üîµ –°–∏–Ω–∏–µ', colors: ['#0066cc', '#1890ff', '#096dd9', '#003a8c', '#40a9ff'] },
  { label: 'üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ', colors: ['#667eea', '#764ba2', '#9b59b6', '#8e44ad', '#a855f7'] },
  { label: 'üü¢ –ó–µ–ª—ë–Ω—ã–µ', colors: ['#52c41a', '#73d13d', '#389e0d', '#237804', '#10b981'] },
  { label: 'üî¥ –ö—Ä–∞—Å–Ω—ã–µ', colors: ['#ff4d4f', '#ff7875', '#cf1322', '#a8071a', '#ef4444'] },
  { label: 'üü° –ñ—ë–ª—Ç—ã–µ', colors: ['#faad14', '#ffc53d', '#d48806', '#ad6800', '#f59e0b'] },
  { label: '‚ö´ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ', colors: ['#000000', '#262626', '#595959', '#8c8c8c', '#d9d9d9', '#ffffff'] },
];

interface LayoutBuilderProps {
  section: any;
  onChange: (updates: any) => void;
}

export default function LayoutBuilder({ section, onChange }: LayoutBuilderProps) {
  // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  if (!section || !section.type || !section.config) {
    return (
      <div style={{ padding: 20, textAlign: 'center', color: '#999' }}>
        –°–µ–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
      </div>
    );
  }

  // –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –ë–ï–ó –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
  const type = section.type;
  const config = section.config;

  const renderFields = () => {
    switch (type) {
      case 'header':
        return (
          <>
            <Form.Item label="–õ–æ–≥–æ—Ç–∏–ø URL">
              <Input
                value={config.logoUrl}
                onChange={(e) => onChange({ logoUrl: e.target.value })}
                placeholder="/logo.png"
              />
            </Form.Item>

            <Form.Item label="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞">
              <Input
                value={config.storeName}
                onChange={(e) => onChange({ storeName: e.target.value })}
                placeholder="–ú–æ–π –º–∞–≥–∞–∑–∏–Ω"
              />
            </Form.Item>

            <Form.Item label="–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ–¥–µ—Ä">
              <Switch
                checked={config.sticky}
                onChange={(checked) => onChange({ sticky: checked })}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫">
              <Switch
                checked={config.showSearch}
                onChange={(checked) => onChange({ showSearch: checked })}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É">
              <Switch
                checked={config.showCart}
                onChange={(checked) => onChange({ showCart: checked })}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å">
              <Switch
                checked={config.showProfile}
                onChange={(checked) => onChange({ showProfile: checked })}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø">
              <Switch
                checked={config.showLogo !== false}
                onChange={(checked) => onChange({ showLogo: checked })}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞">
              <ColorPicker
                value={config.backgroundColor || '#ffffff'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞">
              <ColorPicker
                value={config.textColor || '#000000'}
                onChange={(color) => onChange({ textColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–í—ã—Å–æ—Ç–∞ —Ö–µ–¥–µ—Ä–∞ (px)">
              <InputNumber
                value={config.height || 64}
                onChange={(value) => onChange({ height: value })}
                min={48}
                max={120}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Divider>–ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</Divider>

            {(config.menu || []).map((item: any, index: number) => (
              <Card 
                key={item.id || index} 
                size="small" 
                style={{ marginBottom: 8 }}
                extra={
                  <Button
                    type="text"
                    danger
                    size="small"
                    icon={<DeleteOutlined />}
                    onClick={() => {
                      const newMenu = [...(config.menu || [])];
                      newMenu.splice(index, 1);
                      onChange({ menu: newMenu });
                    }}
                  />
                }
              >
                <Form.Item label={`–ù–∞–∑–≤–∞–Ω–∏–µ #${index + 1}`} style={{ marginBottom: 8 }}>
                  <Input
                    value={item.label}
                    onChange={(e) => {
                      const newMenu = [...(config.menu || [])];
                      newMenu[index] = { ...newMenu[index], label: e.target.value };
                      onChange({ menu: newMenu });
                    }}
                    placeholder="–ö–∞—Ç–∞–ª–æ–≥"
                  />
                </Form.Item>
                <Form.Item label="URL" style={{ marginBottom: 8 }}>
                  <Input
                    value={item.url}
                    onChange={(e) => {
                      const newMenu = [...(config.menu || [])];
                      newMenu[index] = { ...newMenu[index], url: e.target.value };
                      onChange({ menu: newMenu });
                    }}
                    placeholder="/catalog"
                  />
                </Form.Item>
                <Form.Item label="–ò–∫–æ–Ω–∫–∞" style={{ marginBottom: 8 }}>
                  <Select
                    value={item.icon || 'none'}
                    onChange={(value) => {
                      const newMenu = [...(config.menu || [])];
                      newMenu[index] = { ...newMenu[index], icon: value };
                      onChange({ menu: newMenu });
                    }}
                    style={{ width: '100%' }}
                  >
                    <Select.Option value="none">üö´ –ë–µ–∑ –∏–∫–æ–Ω–∫–∏</Select.Option>
                    <Select.Option value="home">üè† –î–æ–º</Select.Option>
                    <Select.Option value="catalog">üì¶ –ö–∞—Ç–∞–ª–æ–≥</Select.Option>
                    <Select.Option value="cart">üõí –ö–æ—Ä–∑–∏–Ω–∞</Select.Option>
                    <Select.Option value="user">üë§ –ü—Ä–æ—Ñ–∏–ª—å</Select.Option>
                    <Select.Option value="heart">‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ</Select.Option>
                    <Select.Option value="info">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Select.Option>
                    <Select.Option value="phone">üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</Select.Option>
                    <Select.Option value="mail">‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è</Select.Option>
                    <Select.Option value="star">‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ</Select.Option>
                    <Select.Option value="tag">üè∑Ô∏è –ê–∫—Ü–∏–∏</Select.Option>
                  </Select>
                </Form.Item>
                <Form.Item label="–ü–æ—Ä—è–¥–æ–∫" style={{ marginBottom: 0 }}>
                  <InputNumber
                    value={item.order}
                    onChange={(value) => {
                      const newMenu = [...(config.menu || [])];
                      newMenu[index] = { ...newMenu[index], order: value || 0 };
                      onChange({ menu: newMenu });
                    }}
                    min={0}
                    style={{ width: '100%' }}
                  />
                </Form.Item>
              </Card>
            ))}

            <Button
              type="dashed"
              block
              icon={<PlusOutlined />}
              onClick={() => {
                const newMenu = [...(config.menu || [])];
                newMenu.push({
                  id: `menu-${Date.now()}`,
                  label: '–ù–æ–≤—ã–π –ø—É–Ω–∫—Ç',
                  url: '/',
                  order: newMenu.length,
                });
                onChange({ menu: newMenu });
              }}
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é
            </Button>
          </>
        );

      case 'hero':
        return (
          <>
            <Form.Item label="–í–∞—Ä–∏–∞–Ω—Ç –¥–∏–∑–∞–π–Ω–∞">
              <Select
                value={config.variant || 'gradient'}
                onChange={(value) => onChange({ variant: value })}
                options={[
                  { label: 'üåà Gradient - –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω', value: 'gradient' },
                  { label: '‚ú® Particles - –ß–∞—Å—Ç–∏—Ü—ã', value: 'particles' },
                  { label: 'üåä Waves - –í–æ–ª–Ω—ã', value: 'waves' },
                  { label: 'üî∑ Geometric - –ì–µ–æ–º–µ—Ç—Ä–∏—è', value: 'geometric' },
                  { label: 'üìù Minimal - –ú–∏–Ω–∏–º–∞–ª–∏–∑–º', value: 'minimal' },
                ]}
              />
            </Form.Item>

            <Divider>–ö–æ–Ω—Ç–µ–Ω—Ç</Divider>

            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫">
              <Input
                value={config.title}
                onChange={(e) => onChange({ title: e.target.value })}
                placeholder="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω"
              />
            </Form.Item>

            <Form.Item label="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫">
              <Input.TextArea
                value={config.subtitle}
                onChange={(e) => onChange({ subtitle: e.target.value })}
                placeholder="–õ—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º"
                rows={3}
              />
            </Form.Item>

            <Form.Item label="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏">
              <Input
                value={config.buttonText}
                onChange={(e) => onChange({ buttonText: e.target.value })}
                placeholder="–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏"
              />
            </Form.Item>

            <Form.Item label="–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏">
              <Input
                value={config.buttonLink}
                onChange={(e) => onChange({ buttonLink: e.target.value })}
                placeholder="/catalog"
              />
            </Form.Item>

            <Form.Item label="–¢–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏">
              <Input
                value={config.secondaryButtonText}
                onChange={(e) => onChange({ secondaryButtonText: e.target.value })}
                placeholder="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              />
            </Form.Item>

            <Form.Item label="–°—Å—ã–ª–∫–∞ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏">
              <Input
                value={config.secondaryButtonLink}
                onChange={(e) => onChange({ secondaryButtonLink: e.target.value })}
                placeholder="/about"
              />
            </Form.Item>

            <Form.Item label="–ó–Ω–∞—á–æ–∫ (badge)">
              <Input
                value={config.badge}
                onChange={(e) => onChange({ badge: e.target.value })}
                placeholder="‚ú® –ù–û–í–ê–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø"
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É">
              <Switch
                checked={config.showStats}
                onChange={(checked) => onChange({ showStats: checked })}
              />
            </Form.Item>

            <Divider>–¶–≤–µ—Ç–∞</Divider>

            <Form.Item label="–¶–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (–Ω–∞—á–∞–ª–æ)">
              <ColorPicker
                value={config.gradientStart || '#667eea'}
                onChange={(color) => onChange({ gradientStart: color.toHexString() })}
                showText
                format="hex"
                presets={colorPresets}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (–∫–æ–Ω–µ—Ü)">
              <ColorPicker
                value={config.gradientEnd || '#764ba2'}
                onChange={(color) => onChange({ gradientEnd: color.toHexString() })}
                showText
                format="hex"
                presets={colorPresets}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞">
              <ColorPicker
                value={config.textColor || '#ffffff'}
                onChange={(color) => onChange({ textColor: color.toHexString() })}
                showText
                format="hex"
                presets={colorPresets}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏">
              <ColorPicker
                value={config.buttonColor || '#ffffff'}
                onChange={(color) => onChange({ buttonColor: color.toHexString() })}
                showText
                format="hex"
                presets={colorPresets}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏">
              <ColorPicker
                value={config.buttonTextColor || '#667eea'}
                onChange={(color) => onChange({ buttonTextColor: color.toHexString() })}
                showText
                format="hex"
                presets={colorPresets}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ (–¥–ª—è Minimal)">
              <ColorPicker
                value={config.backgroundColor || '#ffffff'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                presets={colorPresets}
                style={{ width: '100%' }}
              />
            </Form.Item>
          </>
        );

      case 'products':
        return (
          <>
            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏">
              <Input
                value={config.title}
                onChange={(e) => onChange({ title: e.target.value })}
                placeholder="–¢–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞">
              <ColorPicker
                value={config.backgroundColor || '#ffffff'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Divider>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</Divider>

            <Form.Item label="–ú–∞–∫–µ—Ç">
              <Select
                value={config.layout || 'grid'}
                onChange={(value) => onChange({ layout: value })}
                options={[
                  { label: '–°–µ—Ç–∫–∞', value: 'grid' },
                  { label: '–ö–∞—Ä—É—Å–µ–ª—å', value: 'carousel' },
                  { label: '–°–ø–∏—Å–æ–∫', value: 'list' },
                ]}
              />
            </Form.Item>

            <Form.Item label="–ö–æ–ª–æ–Ω–æ–∫ –≤ —Å–µ—Ç–∫–µ">
              <InputNumber
                min={2}
                max={6}
                value={config.columns || 4}
                onChange={(value) => onChange({ columns: value })}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤">
              <InputNumber
                min={1}
                max={20}
                value={config.limit || 8}
                onChange={(value) => onChange({ limit: value })}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–§–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤">
              <Select
                value={config.filter || 'all'}
                onChange={(value) => onChange({ filter: value })}
                options={[
                  { label: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', value: 'all' },
                  { label: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', value: 'popular' },
                  { label: '–ù–æ–≤–∏–Ω–∫–∏', value: 'new' },
                  { label: '–°–æ —Å–∫–∏–¥–∫–æ–π', value: 'discounted' },
                  { label: '–•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂', value: 'bestsellers' },
                ]}
              />
            </Form.Item>

            <Divider>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</Divider>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–µ –±–µ–π–¥–∂–∏">
              <Switch
                checked={config.showDiscountBadges !== false}
                onChange={(checked) => onChange({ showDiscountBadges: checked })}
              />
            </Form.Item>

            <Form.Item label="–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏">
              <Switch
                checked={config.enableAnimations !== false}
                onChange={(checked) => onChange({ enableAnimations: checked })}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É">
              <Switch
                checked={config.showOldPrice !== false}
                onChange={(checked) => onChange({ showOldPrice: checked })}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É '–í –∫–æ—Ä–∑–∏–Ω—É'">
              <Switch
                checked={config.showAddToCart !== false}
                onChange={(checked) => onChange({ showAddToCart: checked })}
              />
            </Form.Item>
          </>
        );

      case 'features':
        return (
          <>
            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏">
              <Input
                value={config.sectionTitle}
                onChange={(e) => onChange({ sectionTitle: e.target.value })}
                placeholder="–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞">
              <ColorPicker
                value={config.backgroundColor || '#f9fafb'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Divider>–ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤</Divider>

            {(config.items || []).map((item: any, index: number) => (
              <Card 
                key={index} 
                size="small" 
                style={{ marginBottom: 16 }}
                title={`–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ ${index + 1}`}
                extra={
                  <Button
                    type="text"
                    danger
                    size="small"
                    icon={<DeleteOutlined />}
                    onClick={() => {
                      const newItems = [...(config.items || [])];
                      newItems.splice(index, 1);
                      onChange({ items: newItems });
                    }}
                  />
                }
              >
                <Form.Item label="–ò–∫–æ–Ω–∫–∞">
                  <Select
                    value={item.icon}
                    onChange={(value) => {
                      const newItems = [...(config.items || [])];
                      newItems[index] = { ...item, icon: value };
                      onChange({ items: newItems });
                    }}
                    options={[
                      { label: '‚≠ê –ó–≤–µ–∑–¥–∞', value: 'star' },
                      { label: 'üõí –ö–æ—Ä–∑–∏–Ω–∞', value: 'cart' },
                      { label: 'üöö –î–æ—Å—Ç–∞–≤–∫–∞', value: 'truck' },
                      { label: 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞', value: 'shield' },
                      { label: '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å', value: 'zap' },
                      { label: '‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ', value: 'heart' },
                    ]}
                  />
                </Form.Item>

                <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫">
                  <Input
                    value={item.title}
                    onChange={(e) => {
                      const newItems = [...(config.items || [])];
                      newItems[index] = { ...item, title: e.target.value };
                      onChange({ items: newItems });
                    }}
                  />
                </Form.Item>

                <Form.Item label="–û–ø–∏—Å–∞–Ω–∏–µ">
                  <Input.TextArea
                    value={item.description}
                    onChange={(e) => {
                      const newItems = [...(config.items || [])];
                      newItems[index] = { ...item, description: e.target.value };
                      onChange({ items: newItems });
                    }}
                    rows={2}
                  />
                </Form.Item>
              </Card>
            ))}

            <Button
              type="dashed"
              block
              icon={<PlusOutlined />}
              onClick={() => {
                const newItems = [
                  ...(config.items || []),
                  { icon: 'star', title: '–ù–æ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ', description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞' },
                ];
                onChange({ items: newItems });
              }}
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
            </Button>
          </>
        );

      case 'categories':
        return (
          <>
            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫">
              <Input
                value={config.title}
                onChange={(e) => onChange({ title: e.target.value })}
                placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞">
              <ColorPicker
                value={config.backgroundColor || '#f9fafb'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–ö–æ–ª–æ–Ω–æ–∫">
              <InputNumber
                min={2}
                max={6}
                value={config.columns || 4}
                onChange={(value) => onChange({ columns: value })}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤">
              <Switch
                checked={config.showCount !== false}
                onChange={(checked) => onChange({ showCount: checked })}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫–∏">
              <Switch
                checked={config.showIcons !== false}
                onChange={(checked) => onChange({ showIcons: checked })}
              />
            </Form.Item>

            <Divider>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</Divider>

            {(config.categories || []).map((cat: any, index: number) => (
              <Card 
                key={index} 
                size="small" 
                style={{ marginBottom: 16 }}
                title={`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${index + 1}`}
                extra={
                  <Button
                    type="text"
                    danger
                    size="small"
                    icon={<DeleteOutlined />}
                    onClick={() => {
                      const newCats = [...(config.categories || [])];
                      newCats.splice(index, 1);
                      onChange({ categories: newCats });
                    }}
                  />
                }
              >
                <Form.Item label="–ù–∞–∑–≤–∞–Ω–∏–µ">
                  <Input
                    value={cat.name}
                    onChange={(e) => {
                      const newCats = [...(config.categories || [])];
                      newCats[index] = { ...cat, name: e.target.value };
                      onChange({ categories: newCats });
                    }}
                  />
                </Form.Item>

                <Form.Item label="–ò–∫–æ–Ω–∫–∞ (emoji)">
                  <Input
                    value={cat.icon}
                    onChange={(e) => {
                      const newCats = [...(config.categories || [])];
                      newCats[index] = { ...cat, icon: e.target.value };
                      onChange({ categories: newCats });
                    }}
                    placeholder="üì¶"
                  />
                </Form.Item>

                <Form.Item label="–°—Å—ã–ª–∫–∞">
                  <Input
                    value={cat.link}
                    onChange={(e) => {
                      const newCats = [...(config.categories || [])];
                      newCats[index] = { ...cat, link: e.target.value };
                      onChange({ categories: newCats });
                    }}
                    placeholder="/category/electronics"
                  />
                </Form.Item>
              </Card>
            ))}

            <Button
              type="dashed"
              block
              icon={<PlusOutlined />}
              onClick={() => {
                const newCats = [
                  ...(config.categories || []),
                  { name: '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', icon: 'üì¶', link: '/category/new' },
                ];
                onChange({ categories: newCats });
              }}
            >
              –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </Button>
          </>
        );

      case 'banner':
        return (
          <>
            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫">
              <Input
                value={config.title}
                onChange={(e) => onChange({ title: e.target.value })}
                placeholder="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
              />
            </Form.Item>

            <Form.Item label="–û–ø–∏—Å–∞–Ω–∏–µ">
              <Input.TextArea
                value={config.description}
                onChange={(e) => onChange({ description: e.target.value })}
                rows={3}
                placeholder="–ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 20% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑"
              />
            </Form.Item>

            <Form.Item label="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏">
              <Input
                value={config.buttonText}
                onChange={(e) => onChange({ buttonText: e.target.value })}
                placeholder="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
              />
            </Form.Item>

            <Form.Item label="–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏">
              <Input
                value={config.buttonLink}
                onChange={(e) => onChange({ buttonLink: e.target.value })}
                placeholder="/promo"
              />
            </Form.Item>

            <Divider>–î–∏–∑–∞–π–Ω</Divider>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ (–Ω–∞—á–∞–ª–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞)">
              <ColorPicker
                value={config.backgroundColor || '#667eea'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ (–∫–æ–Ω–µ—Ü –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞)">
              <ColorPicker
                value={config.gradientEnd || '#764ba2'}
                onChange={(color) => onChange({ gradientEnd: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (URL)">
              <Input
                value={config.backgroundImage}
                onChange={(e) => onChange({ backgroundImage: e.target.value })}
                placeholder="https://example.com/banner.jpg"
              />
            </Form.Item>

            <Form.Item label="–í—ã—Å–æ—Ç–∞ –±–∞–Ω–Ω–µ—Ä–∞ (px)">
              <InputNumber
                min={200}
                max={800}
                value={config.height || 400}
                onChange={(value) => onChange({ height: value })}
                style={{ width: '100%' }}
              />
            </Form.Item>
          </>
        );

      case 'hot-deals':
        return (
          <>
            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫">
              <Input
                value={config.title}
                onChange={(e) => onChange({ title: e.target.value })}
                placeholder="üî• –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
              />
            </Form.Item>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞">
              <ColorPicker
                value={config.backgroundColor || '#fef3c7'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π">
              <InputNumber
                min={1}
                max={6}
                value={config.dealsCount || 3}
                onChange={(value) => onChange({ dealsCount: value })}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è">
              <Switch
                checked={config.autoRotate !== false}
                onChange={(checked) => onChange({ autoRotate: checked })}
              />
            </Form.Item>

            {config.autoRotate !== false && (
              <Form.Item label="–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ (—Å–µ–∫)">
                <InputNumber
                  min={3}
                  max={30}
                  value={config.rotateInterval || 5}
                  onChange={(value) => onChange({ rotateInterval: value })}
                  style={{ width: '100%' }}
                />
              </Form.Item>
            )}
          </>
        );

      case 'newsletter':
        return (
          <>
            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫">
              <Input
                value={config.title}
                onChange={(e) => onChange({ title: e.target.value })}
                placeholder="üìß –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
              />
            </Form.Item>

            <Form.Item label="–û–ø–∏—Å–∞–Ω–∏–µ">
              <Input.TextArea
                value={config.description}
                onChange={(e) => onChange({ description: e.target.value })}
                rows={2}
                placeholder="–ü–æ–ª—É—á–∞–π—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–≤—ã–º–∏"
              />
            </Form.Item>

            <Form.Item label="Placeholder –ø–æ–ª—è email">
              <Input
                value={config.placeholder}
                onChange={(e) => onChange({ placeholder: e.target.value })}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
              />
            </Form.Item>

            <Form.Item label="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏">
              <Input
                value={config.buttonText}
                onChange={(e) => onChange({ buttonText: e.target.value })}
                placeholder="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
              />
            </Form.Item>

            <Divider>–î–∏–∑–∞–π–Ω</Divider>

            <Form.Item label="–¶–≤–µ—Ç —Ñ–æ–Ω–∞">
              <ColorPicker
                value={config.backgroundColor || '#667eea'}
                onChange={(color) => onChange({ backgroundColor: color.toHexString() })}
                showText
                format="hex"
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–æ–Ω–∞">
              <Switch
                checked={config.showPattern !== false}
                onChange={(checked) => onChange({ showPattern: checked })}
              />
            </Form.Item>

            <Form.Item label="–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É">
              <Switch
                checked={config.centerForm !== false}
                onChange={(checked) => onChange({ centerForm: checked })}
              />
            </Form.Item>
          </>
        );

      default:
        return (
          <Card size="small">
            <p style={{ color: '#999' }}>–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–µ–∫—Ü–∏–∏</p>
          </Card>
        );
    }
  };

  return (
    <div>
      <Divider>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∫—Ü–∏–∏</Divider>
      <Form layout="vertical">{renderFields()}</Form>
    </div>
  );
}
