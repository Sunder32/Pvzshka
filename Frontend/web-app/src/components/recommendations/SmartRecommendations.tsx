import React, { useEffect, useState } from 'react'
import { Product } from '@/types'
import ProductCard from '../product/ProductCard'
import { Swiper, SwiperSlide } from 'swiper/react'
import { Navigation, Pagination, Autoplay } from 'swiper/modules'
import 'swiper/css'
import 'swiper/css/navigation'
import 'swiper/css/pagination'

interface RecommendationsProps {
  userId?: string
  currentProductId?: string
  categoryId?: string
  maxItems?: number
  title?: string
  algorithm?: 'collaborative' | 'content-based' | 'hybrid' | 'trending' | 'personalized'
  autoPlay?: boolean
}

/**
 * SmartRecommendations - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ML
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º—ã:
 * - collaborative: –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–∫–∞–∫ –Ω–∞ Amazon)
 * - content-based: –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (–ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã)
 * - hybrid: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥
 * - trending: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
 * - personalized: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å (Swiper)
 * - Lazy loading –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
 * - –ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export default function SmartRecommendations({
  userId,
  currentProductId,
  categoryId,
  maxItems = 12,
  title,
  algorithm = 'hybrid',
  autoPlay = false,
}: RecommendationsProps) {
  const [recommendations, setRecommendations] = useState<Product[]>([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    fetchRecommendations()
  }, [userId, currentProductId, categoryId, algorithm])

  const fetchRecommendations = async () => {
    setIsLoading(true)
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –∑–∞–ø—Ä–æ—Å –∫ ML API
      // const response = await fetch('/api/recommendations', {
      //   method: 'POST',
      //   body: JSON.stringify({ userId, currentProductId, categoryId, algorithm, maxItems })
      // })
      // const data = await response.json()
      
      // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const mockProducts: Product[] = [
        {
          id: `rec-${Math.random()}`,
          name: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä 1',
          description: '–ü–æ–¥–æ–±—Ä–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
          price: 1999,
          compareAtPrice: 2999,
          images: ['/placeholder-product.jpg'],
          category: categoryId || 'electronics',
          inStock: true,
          rating: 4.5,
          reviewCount: 128,
          isNew: true,
        },
        // ... –±–æ–ª—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      ]

      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      await new Promise(resolve => setTimeout(resolve, 500))
      setRecommendations(mockProducts)
    } catch (error) {
      console.error('Failed to fetch recommendations:', error)
    } finally {
      setIsLoading(false)
    }
  }

  // –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ML
  const trackClick = (productId: string, position: number) => {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫–∏
    // analytics.track('recommendation_click', {
    //   userId,
    //   productId,
    //   algorithm,
    //   position,
    //   timestamp: new Date().toISOString()
    // })
    console.log('Recommendation clicked:', { productId, position, algorithm })
  }

  const getTitleByAlgorithm = () => {
    if (title) return title

    const titles = {
      collaborative: 'üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Ç–∞–∫–∂–µ —Å–º–æ—Ç—Ä—è—Ç',
      'content-based': 'üîç –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã',
      hybrid: '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–ª—è –≤–∞—Å',
      trending: 'üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Å–µ–π—á–∞—Å',
      personalized: '‚ú® –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
    }

    return titles[algorithm] || '–í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è'
  }

  if (isLoading) {
    return <RecommendationsSkeleton title={getTitleByAlgorithm()} />
  }

  if (recommendations.length === 0) {
    return null
  }

  return (
    <section className="py-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">{getTitleByAlgorithm()}</h2>
        <button className="text-[#005BFF] font-semibold hover:underline">
          –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ‚Üí
        </button>
      </div>

      <Swiper
        modules={[Navigation, Pagination, Autoplay]}
        spaceBetween={16}
        slidesPerView={1}
        navigation
        pagination={{ clickable: true }}
        autoplay={autoPlay ? { delay: 3000, disableOnInteraction: false } : false}
        breakpoints={{
          640: { slidesPerView: 2 },
          768: { slidesPerView: 3 },
          1024: { slidesPerView: 4 },
          1280: { slidesPerView: 5 },
        }}
        className="recommendations-swiper"
      >
        {recommendations.map((product, index) => (
          <SwiperSlide key={product.id}>
            <div onClick={() => trackClick(product.id, index)}>
              <ProductCard product={product} priority={index < 4} />
            </div>
          </SwiperSlide>
        ))}
      </Swiper>
    </section>
  )
}

/**
 * PersonalizedHomepage - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 */
export function PersonalizedHomepage({ userId }: { userId?: string }) {
  return (
    <div className="space-y-12">
      {/* –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ */}
      {userId && (
        <SmartRecommendations
          userId={userId}
          title="üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏"
          algorithm="personalized"
          maxItems={8}
        />
      )}

      {/* –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ */}
      <SmartRecommendations
        title="üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Å–µ–π—á–∞—Å"
        algorithm="trending"
        maxItems={12}
        autoPlay
      />

      {/* –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ */}
      {userId && (
        <SmartRecommendations
          userId={userId}
          title="‚ú® –ü–æ–¥–æ–±—Ä–∞–Ω–æ –¥–ª—è –≤–∞—Å"
          algorithm="hybrid"
          maxItems={10}
        />
      )}

      {/* –ù–æ–≤–∏–Ω–∫–∏ –≤ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö */}
      {userId && (
        <SmartRecommendations
          userId={userId}
          title="üéÅ –ù–æ–≤–∏–Ω–∫–∏ –≤ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
          algorithm="content-based"
          maxItems={10}
        />
      )}
    </div>
  )
}

/**
 * RecommendationsSkeleton - Skeleton loader
 */
function RecommendationsSkeleton({ title }: { title: string }) {
  return (
    <section className="py-8 animate-pulse">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
      </div>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
        {[...Array(5)].map((_, i) => (
          <div key={i} className="bg-white rounded-xl border border-gray-200">
            <div className="aspect-square bg-gray-200" />
            <div className="p-4 space-y-3">
              <div className="h-4 bg-gray-200 rounded w-3/4" />
              <div className="h-6 bg-gray-200 rounded w-1/2" />
            </div>
          </div>
        ))}
      </div>
    </section>
  )
}

/**
 * ViewedHistory - –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */
interface ViewedHistoryProps {
  userId: string
  maxItems?: number
}

export function ViewedHistory({ userId, maxItems = 10 }: ViewedHistoryProps) {
  const [viewedProducts, setViewedProducts] = useState<Product[]>([])

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –∏–ª–∏ API
    const history = localStorage.getItem(`viewed_history_${userId}`)
    if (history) {
      const productIds = JSON.parse(history)
      // Fetch products by IDs
      // setViewedProducts(fetchedProducts)
    }
  }, [userId])

  if (viewedProducts.length === 0) return null

  return (
    <section className="py-8">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">üëÅÔ∏è –í—ã —Å–º–æ—Ç—Ä–µ–ª–∏</h2>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
        {viewedProducts.slice(0, maxItems).map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </section>
  )
}

/**
 * CategoryTrends - –¢—Ä–µ–Ω–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
interface CategoryTrendsProps {
  categoryId: string
  categoryName: string
  maxItems?: number
}

export function CategoryTrends({ categoryId, categoryName, maxItems = 8 }: CategoryTrendsProps) {
  return (
    <SmartRecommendations
      categoryId={categoryId}
      title={`üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}"`}
      algorithm="trending"
      maxItems={maxItems}
    />
  )
}

/**
 * CrossSell - –ö—Ä–æ—Å—Å-—Å–µ–ª–ª –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
 */
interface CrossSellProps {
  productId: string
  maxItems?: number
}

export function CrossSell({ productId, maxItems = 6 }: CrossSellProps) {
  return (
    <SmartRecommendations
      currentProductId={productId}
      title="üõçÔ∏è –° —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º –ø–æ–∫—É–ø–∞—é—Ç"
      algorithm="collaborative"
      maxItems={maxItems}
    />
  )
}

/**
 * UpSell - –ê–ø—Å–µ–ª–ª (–±–æ–ª–µ–µ –¥–æ—Ä–æ–≥–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã)
 */
interface UpSellProps {
  productId: string
  maxItems?: number
}

export function UpSell({ productId, maxItems = 4 }: UpSellProps) {
  return (
    <SmartRecommendations
      currentProductId={productId}
      title="‚¨ÜÔ∏è –ë–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–æ–¥–µ–ª–∏"
      algorithm="content-based"
      maxItems={maxItems}
    />
  )
}
