import React from 'react'

export type BadgeVariant = 
  | 'discount'
  | 'new'
  | 'top'
  | 'limited'
  | 'exclusive'
  | 'bestseller'
  | 'gift'
  | 'sale'
  | 'preorder'
  | 'custom'

interface BadgeProps {
  variant: BadgeVariant
  children?: React.ReactNode
  value?: string | number
  animated?: boolean
  size?: 'sm' | 'md' | 'lg'
  icon?: React.ReactNode
  className?: string
}

/**
 * Badge - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤
 * 
 * –í–∞—Ä–∏–∞–Ω—Ç—ã:
 * - discount: –°–∫–∏–¥–∫–∞ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, –∫–∞–∫ WB)
 * - new: –ù–æ–≤–∏–Ω–∫–∞ (—Å–∏–Ω–∏–π, –∫–∞–∫ Ozon)
 * - top: –¢–æ–ø –ø—Ä–æ–¥–∞–∂ (–≥—Ä–∞–¥–∏–µ–Ω—Ç –∑–æ–ª–æ—Ç–æ-–æ—Ä–∞–Ω–∂)
 * - limited: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–∫—Ä–∞—Å–Ω—ã–π —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π)
 * - exclusive: –≠–∫—Å–∫–ª—é–∑–∏–≤ (—á–µ—Ä–Ω—ã–π)
 * - bestseller: –•–∏—Ç –ø—Ä–æ–¥–∞–∂ (–∑–µ–ª–µ–Ω—ã–π)
 * - gift: –ü–æ–¥–∞—Ä–æ–∫ (—Ä–æ–∑–æ–≤—ã–π)
 * - sale: –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ (–∫—Ä–∞—Å–Ω—ã–π)
 * - preorder: –ü—Ä–µ–¥–∑–∞–∫–∞–∑ (—Å–µ—Ä—ã–π)
 * - custom: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
 */
export default function Badge({
  variant,
  children,
  value,
  animated = false,
  size = 'md',
  icon,
  className = '',
}: BadgeProps) {
  const sizeClasses = {
    sm: 'text-[10px] px-1.5 py-0.5 rounded',
    md: 'text-xs px-2 py-1 rounded-md',
    lg: 'text-sm px-3 py-1.5 rounded-lg',
  }

  const variantConfig: Record<BadgeVariant, { 
    bg: string
    text: string
    label?: string
    emoji?: string
  }> = {
    discount: {
      bg: 'bg-[#CB11AB]',
      text: 'text-white',
      emoji: value ? `-${value}%` : '',
    },
    new: {
      bg: 'bg-[#005BFF]',
      text: 'text-white',
      label: '–ù–æ–≤–∏–Ω–∫–∞',
    },
    top: {
      bg: 'bg-gradient-to-r from-yellow-400 to-orange-500',
      text: 'text-white',
      emoji: '‚≠ê',
      label: '–¢–æ–ø',
    },
    limited: {
      bg: 'bg-red-600',
      text: 'text-white',
      emoji: 'üî•',
      label: '–û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ',
    },
    exclusive: {
      bg: 'bg-black',
      text: 'text-white',
      emoji: 'üíé',
      label: '–≠–∫—Å–∫–ª—é–∑–∏–≤',
    },
    bestseller: {
      bg: 'bg-green-600',
      text: 'text-white',
      emoji: 'üèÜ',
      label: '–•–∏—Ç –ø—Ä–æ–¥–∞–∂',
    },
    gift: {
      bg: 'bg-pink-500',
      text: 'text-white',
      emoji: 'üéÅ',
      label: '–ü–æ–¥–∞—Ä–æ–∫',
    },
    sale: {
      bg: 'bg-red-500',
      text: 'text-white',
      emoji: 'üõçÔ∏è',
      label: '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞',
    },
    preorder: {
      bg: 'bg-gray-600',
      text: 'text-white',
      emoji: 'üì¶',
      label: '–ü—Ä–µ–¥–∑–∞–∫–∞–∑',
    },
    custom: {
      bg: 'bg-gray-700',
      text: 'text-white',
    },
  }

  const config = variantConfig[variant]
  const displayText = children || `${config.emoji || ''} ${config.label || value || ''}`.trim()

  return (
    <span
      className={`
        inline-flex items-center gap-1 font-bold shadow-lg
        ${config.bg} ${config.text} ${sizeClasses[size]}
        ${animated ? 'animate-pulse' : ''}
        ${className}
      `}
    >
      {icon && <span className="flex-shrink-0">{icon}</span>}
      {displayText}
    </span>
  )
}

/**
 * BadgeGroup - –ì—Ä—É–ø–ø–∞ –±–µ–π–¥–∂–µ–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
 */
interface BadgeGroupProps {
  badges: Array<{
    variant: BadgeVariant
    value?: string | number
    show?: boolean
  }>
  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

export function BadgeGroup({
  badges,
  position = 'top-left',
  size = 'md',
  className = '',
}: BadgeGroupProps) {
  const positionClasses = {
    'top-left': 'top-2 left-2',
    'top-right': 'top-2 right-2',
    'bottom-left': 'bottom-2 left-2',
    'bottom-right': 'bottom-2 right-2',
  }

  const visibleBadges = badges.filter(badge => badge.show !== false)

  if (visibleBadges.length === 0) return null

  return (
    <div
      className={`
        absolute ${positionClasses[position]} flex flex-col gap-1.5 z-10
        ${className}
      `}
    >
      {visibleBadges.map((badge, index) => (
        <Badge
          key={index}
          variant={badge.variant}
          value={badge.value}
          size={size}
          animated={badge.variant === 'limited'}
        />
      ))}
    </div>
  )
}

/**
 * StockBadge - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
 */
interface StockBadgeProps {
  stock: number
  lowStockThreshold?: number
  size?: 'sm' | 'md' | 'lg'
  showIcon?: boolean
}

export function StockBadge({
  stock,
  lowStockThreshold = 10,
  size = 'md',
  showIcon = true,
}: StockBadgeProps) {
  if (stock === 0) {
    return (
      <Badge variant="custom" size={size} className="bg-gray-400">
        {showIcon && '‚ùå'} –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
      </Badge>
    )
  }

  if (stock <= lowStockThreshold) {
    return (
      <Badge variant="limited" size={size} animated>
        –û—Å—Ç–∞–ª–æ—Å—å {stock} —à—Ç
      </Badge>
    )
  }

  return (
    <Badge variant="custom" size={size} className="bg-green-600">
      {showIcon && '‚úì'} –í –Ω–∞–ª–∏—á–∏–∏
    </Badge>
  )
}

/**
 * DeliveryBadge - –ë–µ–π–¥–∂ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
 */
interface DeliveryBadgeProps {
  type: 'fast' | 'today' | 'tomorrow' | 'free' | 'pvz'
  size?: 'sm' | 'md' | 'lg'
}

export function DeliveryBadge({ type, size = 'sm' }: DeliveryBadgeProps) {
  const deliveryConfig = {
    fast: { emoji: '‚ö°', text: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', bg: 'bg-orange-500' },
    today: { emoji: 'üöÄ', text: '–î–æ—Å—Ç–∞–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è', bg: 'bg-blue-600' },
    tomorrow: { emoji: 'üì¶', text: '–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞', bg: 'bg-green-600' },
    free: { emoji: 'üéâ', text: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', bg: 'bg-purple-600' },
    pvz: { emoji: 'üè™', text: '–í –ü–í–ó —á–µ—Ä–µ–∑ 2 –¥–Ω—è', bg: 'bg-gray-600' },
  }

  const config = deliveryConfig[type]

  return (
    <Badge variant="custom" size={size} className={config.bg}>
      {config.emoji} {config.text}
    </Badge>
  )
}

/**
 * PriceBadge - –ë–µ–π–¥–∂ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∏ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–æ–π
 */
interface PriceBadgeProps {
  originalPrice: number
  currentPrice: number
  size?: 'sm' | 'md' | 'lg'
  showPercentage?: boolean
}

export function PriceBadge({
  originalPrice,
  currentPrice,
  size = 'md',
  showPercentage = true,
}: PriceBadgeProps) {
  const discountPercentage = Math.round(
    ((originalPrice - currentPrice) / originalPrice) * 100
  )

  if (discountPercentage <= 0) return null

  return (
    <Badge variant="discount" size={size} value={discountPercentage}>
      {showPercentage ? `-${discountPercentage}%` : '–°–∫–∏–¥–∫–∞'}
    </Badge>
  )
}

/**
 * TimerBadge - –ë–µ–π–¥–∂ —Å —Ç–∞–π–º–µ—Ä–æ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –¥–ª—è –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 */
interface TimerBadgeProps {
  endTime: Date
  size?: 'sm' | 'md' | 'lg'
  onExpire?: () => void
}

export function TimerBadge({ endTime, size = 'md', onExpire }: TimerBadgeProps) {
  const [timeLeft, setTimeLeft] = React.useState('')

  React.useEffect(() => {
    const calculateTimeLeft = () => {
      const now = new Date().getTime()
      const distance = endTime.getTime() - now

      if (distance < 0) {
        onExpire?.()
        return '–ò—Å—Ç–µ–∫–ª–æ'
      }

      const hours = Math.floor(distance / (1000 * 60 * 60))
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))
      const seconds = Math.floor((distance % (1000 * 60)) / 1000)

      return `${hours.toString().padStart(2, '0')}:${minutes
        .toString()
        .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
    }

    const timer = setInterval(() => {
      setTimeLeft(calculateTimeLeft())
    }, 1000)

    setTimeLeft(calculateTimeLeft())

    return () => clearInterval(timer)
  }, [endTime, onExpire])

  return (
    <Badge variant="limited" size={size} animated>
      ‚è∞ {timeLeft}
    </Badge>
  )
}
