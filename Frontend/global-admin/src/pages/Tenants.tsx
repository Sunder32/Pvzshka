import { useState, useEffect } from 'react'
import { Table, Button, Space, Tag, Input, Modal, Form, Select, message, Tabs, Card, Row, Col, Upload, DatePicker, Descriptions } from 'antd'
import { PlusOutlined, EditOutlined, DeleteOutlined, SearchOutlined, LoginOutlined, EyeOutlined, UploadOutlined, LinkOutlined, GlobalOutlined } from '@ant-design/icons'
import type { TabsProps } from 'antd'
import { tenantsAPI, type Tenant, type SupportTicket } from '../services/api'

const { Search } = Input
const { TextArea} = Input

// Mock –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã - –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ API
const mockTickets: SupportTicket[] = []

export default function Tenants() {
  const [tenants, setTenants] = useState<Tenant[]>([])
  const [tickets, setTickets] = useState<SupportTicket[]>([])
  const [loading, setLoading] = useState(false)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isTicketModalOpen, setIsTicketModalOpen] = useState(false)
  const [editingTenant, setEditingTenant] = useState<Tenant | null>(null)
  const [selectedTicket, setSelectedTicket] = useState<SupportTicket | null>(null)
  const [form] = Form.useForm()
  const [ticketForm] = Form.useForm()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadTenants()
    // loadTickets() // TODO: –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç ticket service
  }, [])

  const loadTenants = async () => {
    try {
      setLoading(true)
      const data = await tenantsAPI.getAll()
      setTenants(data)
    } catch (error) {
      console.error('Error loading tenants:', error)
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤')
    } finally {
      setLoading(false)
    }
  }

  // Columns for Tenants table
  const tenantColumns = [
    {
      title: '–õ–æ–≥–æ',
      dataIndex: 'logo',
      key: 'logo',
      width: 80,
      render: (logo: string | undefined, record: Tenant) => (
        <div style={{ width: 50, height: 50, borderRadius: 8, background: '#f0f0f0', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: 24 }}>
          {logo ? <img src={logo} alt={record.name} style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: 8 }} /> : 'üè™'}
        </div>
      ),
    },
    {
      title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      dataIndex: 'name',
      key: 'name',
      render: (name: string, record: Tenant) => (
        <div>
          <div style={{ fontWeight: 600 }}>{name}</div>
          <div style={{ fontSize: 12, color: '#888' }}>{record.subdomain}</div>
        </div>
      ),
    },
    {
      title: 'URL –º–∞–≥–∞–∑–∏–Ω–∞',
      dataIndex: 'subdomain',
      key: 'subdomain',
      render: (subdomain: string, record: Tenant) => {
        const webAppUrl = `http://localhost:3003/market/${subdomain}`
        return (
          <div>
            <div>
              <a href={webAppUrl} target="_blank" rel="noopener noreferrer">
                <Tag icon={<LinkOutlined />} color="blue" style={{ cursor: 'pointer' }}>
                  creator/market/{subdomain}
                </Tag>
              </a>
            </div>
            {record.customDomain && (
              <div style={{ marginTop: 4 }}>
                <Tag color="purple">{record.customDomain}</Tag>
              </div>
            )}
          </div>
        )
      },
    },
    {
      title: '–°—Ç—Ä–∞–Ω–∞',
      dataIndex: 'country',
      key: 'country',
      render: (country: string | undefined) => (
        <div style={{ fontSize: 12 }}>
          {country || 'RU'}
        </div>
      ),
    },
    {
      title: '–¢–∞—Ä–∏—Ñ',
      dataIndex: 'tier',
      key: 'tier',
      render: (tier: string) => {
        const colors: Record<string, string> = {
          basic: 'default',
          standard: 'blue',
          premium: 'purple',
          enterprise: 'gold',
        }
        return <Tag color={colors[tier]}>{tier.toUpperCase()}</Tag>
      },
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => {
        const colors: Record<string, string> = {
          active: 'success',
          suspended: 'error',
          trial: 'warning',
        }
        const labels: Record<string, string> = {
          active: '–ê–∫—Ç–∏–≤–µ–Ω',
          suspended: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
          trial: '–ü—Ä–æ–±–Ω—ã–π',
        }
        return <Tag color={colors[status]}>{labels[status]}</Tag>
      },
    },
    {
      title: '–°–æ–∑–¥–∞–Ω',
      dataIndex: 'createdAt',
      key: 'createdAt',
      render: (date: string) => new Date(date).toLocaleDateString('ru-RU'),
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 320,
      render: (_: any, record: Tenant) => {
        const webAppUrl = `http://localhost:3003/market/${record.subdomain}`
        return (
          <Space>
            <Button
              type="link"
              size="small"
              icon={<GlobalOutlined />}
              onClick={() => window.open(webAppUrl, '_blank')}
            >
              –û—Ç–∫—Ä—ã—Ç—å
            </Button>
            <Button
              type="primary"
              size="small"
              icon={<LoginOutlined />}
              onClick={() => handleConnectToTenant(record)}
            >
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            </Button>
            <Button
              size="small"
              icon={<EditOutlined />}
              onClick={() => handleEdit(record)}
            />
            <Button
              size="small"
              danger
              icon={<DeleteOutlined />}
              onClick={() => handleDelete(record.id)}
            />
          </Space>
        )
      },
    },
  ]

  // Columns for Support Tickets table
  const ticketColumns = [
    {
      title: 'ID',
      dataIndex: 'id',
      key: 'id',
      width: 80,
    },
    {
      title: '–¢–µ–º–∞',
      dataIndex: 'subject',
      key: 'subject',
      render: (subject: string, record: SupportTicket) => (
        <div>
          <div style={{ fontWeight: 600 }}>{subject}</div>
          <div style={{ fontSize: 12, color: '#888', marginTop: 4 }}>
            {record.description.substring(0, 80)}...
          </div>
        </div>
      ),
    },
    {
      title: '–ü—Ä–æ–µ–∫—Ç',
      dataIndex: 'tenantName',
      key: 'tenantName',
      render: (name: string) => <Tag color="blue">{name}</Tag>,
    },
    {
      title: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      dataIndex: 'priority',
      key: 'priority',
      render: (priority: string) => {
        const colors: Record<string, string> = {
          low: 'default',
          medium: 'blue',
          high: 'orange',
          critical: 'red',
        }
        const labels: Record<string, string> = {
          low: '–ù–∏–∑–∫–∏–π',
          medium: '–°—Ä–µ–¥–Ω–∏–π',
          high: '–í—ã—Å–æ–∫–∏–π',
          critical: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
        }
        return <Tag color={colors[priority]}>{labels[priority]}</Tag>
      },
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => {
        const colors: Record<string, string> = {
          new: 'blue',
          'in-progress': 'orange',
          resolved: 'green',
          closed: 'default',
        }
        const labels: Record<string, string> = {
          new: '–ù–æ–≤–∞—è',
          'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
          resolved: '–†–µ—à–µ–Ω–∞',
          closed: '–ó–∞–∫—Ä—ã—Ç–∞',
        }
        return <Tag color={colors[status]}>{labels[status]}</Tag>
      },
    },
    {
      title: '–°–æ–∑–¥–∞–Ω–∞',
      dataIndex: 'createdAt',
      key: 'createdAt',
      render: (date: string) => new Date(date).toLocaleString('ru-RU'),
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      render: (_: any, record: SupportTicket) => (
        <Space>
          <Button
            type="link"
            icon={<EyeOutlined />}
            onClick={() => handleViewTicket(record)}
          >
            –û—Ç–∫—Ä—ã—Ç—å
          </Button>
        </Space>
      ),
    },
  ]

  const handleConnectToTenant = (tenant: Tenant) => {
    message.info(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–∞–≥–∞–∑–∏–Ω—É "${tenant.name}"...`)
    // Redirect to tenant admin panel
    window.open(`http://localhost:3002?tenantId=${tenant.id}`, '_blank')
  }

  const handleEdit = (tenant: Tenant) => {
    setEditingTenant(tenant)
    form.setFieldsValue(tenant)
    setIsModalOpen(true)
  }

  const handleViewTicket = (ticket: SupportTicket) => {
    setSelectedTicket(ticket)
    ticketForm.setFieldsValue({
      status: ticket.status,
      priority: ticket.priority,
    })
    setIsTicketModalOpen(true)
  }

  const handleSubmit = async (values: any) => {
    try {
      setLoading(true)
      if (editingTenant) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ tenant
        await tenantsAPI.update(editingTenant.id, values)
        message.success('–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω')
        await loadTenants() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ tenant
        await tenantsAPI.create(values)
        message.success('–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω!')
        await loadTenants() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
      }
      setIsModalOpen(false)
      form.resetFields()
      setEditingTenant(null)
    } catch (error) {
      console.error('Error saving tenant:', error)
      message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = (id: string) => {
    Modal.confirm({
      title: '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –º–∞–≥–∞–∑–∏–Ω–∞?',
      content: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!',
      okText: '–£–¥–∞–ª–∏—Ç—å',
      okType: 'danger',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: async () => {
        try {
          setLoading(true)
          await tenantsAPI.delete(id)
          message.success('–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω')
          await loadTenants()
        } catch (error) {
          console.error('Error deleting tenant:', error)
          message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞')
        } finally {
          setLoading(false)
        }
      }
    })
  }

  const handleUpdateTicket = (values: any) => {
    if (selectedTicket) {
      setTickets(
        tickets.map((t) =>
          t.id === selectedTicket.id
            ? { ...t, ...values, updatedAt: new Date().toISOString() }
            : t
        )
      )
      message.success('–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
      setIsTicketModalOpen(false)
      setSelectedTicket(null)
      ticketForm.resetFields()
    }
  }

  const tabItems: TabsProps['items'] = [
    {
      key: 'projects',
      label: (
        <span>
          <span style={{ fontSize: 18, marginRight: 8 }}>üè™</span>
          –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        </span>
      ),
      children: (
        <div>
          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
            <Col span={18}>
              <Card>
                <h2>–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤</h2>
                <div style={{ marginBottom: 16 }}>
                  <Search
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø–æ–¥–¥–æ–º–µ–Ω—É –∏–ª–∏ email"
                    prefix={<SearchOutlined />}
                    style={{ width: '100%' }}
                  />
                </div>
                <Table 
                  dataSource={tenants} 
                  columns={tenantColumns} 
                  rowKey="id"
                  loading={loading}
                  pagination={{ pageSize: 10 }}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω" style={{ position: 'sticky', top: 20 }}>
                <Form
                  layout="vertical"
                  onFinish={async (values) => {
                    try {
                      setLoading(true);
                      const newTenant = await tenantsAPI.create({
                        name: values.name,
                        subdomain: values.subdomain,
                        tier: values.tier || 'starter',
                        status: 'active',
                        country: 'RU',
                      });
                      
                      setTenants([newTenant, ...tenants]);
                      message.success('–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                      form.resetFields();
                    } catch (error: any) {
                      console.error('Error creating tenant:', error);
                      if (error.response?.status === 409) {
                        message.error('–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –ø–æ–¥–¥–æ–º–µ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                      } else {
                        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞');
                      }
                    } finally {
                      setLoading(false);
                    }
                  }}
                  form={form}
                >
                  <Form.Item
                    name="name"
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' }]}
                  >
                    <Input placeholder="–ú–æ–π –º–∞–≥–∞–∑–∏–Ω" />
                  </Form.Item>

                  <Form.Item
                    name="subdomain"
                    label="URL (–ø–æ–¥–¥–æ–º–µ–Ω)"
                    rules={[
                      { required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω' },
                      { pattern: /^[a-z0-9-]+$/, message: '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å' },
                    ]}
                  >
                    <Input 
                      placeholder="myshop" 
                      addonBefore="creator/market/"
                    />
                  </Form.Item>

                  <Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
                    <TextArea rows={3} placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞" />
                  </Form.Item>

                  <Form.Item
                    name="adminEmail"
                    label="Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    rules={[
                      { required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
                      { type: 'email', message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' },
                    ]}
                  >
                    <Input placeholder="admin@example.com" />
                  </Form.Item>

                  <Form.Item
                    name="adminPhone"
                    label="–¢–µ–ª–µ—Ñ–æ–Ω"
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω' }]}
                  >
                    <Input placeholder="+7 (999) 123-45-67" />
                  </Form.Item>

                  <Form.Item
                    name="tier"
                    label="–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"
                    rules={[{ required: true }]}
                    initialValue="starter"
                  >
                    <Select>
                      <Select.Option value="free">Free - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</Select.Option>
                      <Select.Option value="starter">Starter - 990‚ÇΩ/–º–µ—Å</Select.Option>
                      <Select.Option value="professional">Professional - 2990‚ÇΩ/–º–µ—Å</Select.Option>
                      <Select.Option value="enterprise">Enterprise - –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è</Select.Option>
                    </Select>
                  </Form.Item>

                  <Form.Item
                    name="country"
                    label="–°—Ç—Ä–∞–Ω–∞"
                    rules={[{ required: true }]}
                    initialValue="RU"
                  >
                    <Select>
                      <Select.Option value="RU">üá∑üá∫ –†–æ—Å—Å–∏—è</Select.Option>
                      <Select.Option value="KZ">üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</Select.Option>
                      <Select.Option value="BY">üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å</Select.Option>
                      <Select.Option value="UA">üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞</Select.Option>
                    </Select>
                  </Form.Item>

                  <Form.Item>
                    <Button type="primary" htmlType="submit" icon={<PlusOutlined />} block size="large">
                      –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
                    </Button>
                  </Form.Item>
                </Form>
              </Card>
            </Col>
          </Row>
        </div>
      ),
    },
    {
      key: 'support',
      label: (
        <span>
          <span style={{ fontSize: 18, marginRight: 8 }}>üí¨</span>
          –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
          <Tag color="red" style={{ marginLeft: 8 }}>
            {tickets.filter((t) => t.status === 'open').length}
          </Tag>
        </span>
      ),
      children: (
        <Card>
          <h2>–ó–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É</h2>
          <div style={{ marginBottom: 16 }}>
            <Space>
              <Search
                placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—É"
                prefix={<SearchOutlined />}
                style={{ width: 400 }}
              />
              <Select placeholder="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É" style={{ width: 150 }} allowClear>
                <Select.Option value="new">–ù–æ–≤—ã–µ</Select.Option>
                <Select.Option value="in-progress">–í —Ä–∞–±–æ—Ç–µ</Select.Option>
                <Select.Option value="resolved">–†–µ—à–µ–Ω–Ω—ã–µ</Select.Option>
                <Select.Option value="closed">–ó–∞–∫—Ä—ã—Ç—ã–µ</Select.Option>
              </Select>
              <Select placeholder="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" style={{ width: 150 }} allowClear>
                <Select.Option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</Select.Option>
                <Select.Option value="high">–í—ã—Å–æ–∫–∏–π</Select.Option>
                <Select.Option value="medium">–°—Ä–µ–¥–Ω–∏–π</Select.Option>
                <Select.Option value="low">–ù–∏–∑–∫–∏–π</Select.Option>
              </Select>
            </Space>
          </div>
          <Table 
            dataSource={tickets} 
            columns={ticketColumns} 
            rowKey="id"
            pagination={{ pageSize: 20 }}
          />
        </Card>
      ),
    },
  ]

  return (
    <div>
      <div style={{ marginBottom: 24 }}>
        <h1 style={{ fontSize: 28, marginBottom: 8 }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏</h1>
        <p style={{ color: '#888', fontSize: 14 }}>
          –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤
        </p>
      </div>

      <Tabs defaultActiveKey="projects" items={tabItems} size="large" />

      {/* Edit Tenant Modal */}
      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
        open={isModalOpen}
        onCancel={() => {
          setIsModalOpen(false)
          form.resetFields()
          setEditingTenant(null)
        }}
        footer={null}
        width={600}
      >
        <Form form={form} onFinish={handleSubmit} layout="vertical">
          <Form.Item
            name="name"
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="subdomain"
            label="–ü–æ–¥–¥–æ–º–µ–Ω"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω' }]}
          >
            <Input addonBefore="creator/market/" />
          </Form.Item>

          <Form.Item name="customDomain" label="–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω">
            <Input placeholder="example.com" />
          </Form.Item>

          <Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
            <TextArea rows={3} />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="adminEmail"
                label="Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                rules={[{ required: true, type: 'email' }]}
              >
                <Input />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="adminPhone"
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                rules={[{ required: true }]}
              >
                <Input />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="tier"
                label="–¢–∞—Ä–∏—Ñ"
                rules={[{ required: true }]}
              >
                <Select>
                  <Select.Option value="free">Free</Select.Option>
                  <Select.Option value="starter">Starter</Select.Option>
                  <Select.Option value="professional">Professional</Select.Option>
                  <Select.Option value="enterprise">Enterprise</Select.Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="status"
                label="–°—Ç–∞—Ç—É—Å"
                rules={[{ required: true }]}
              >
                <Select>
                  <Select.Option value="active">–ê–∫—Ç–∏–≤–µ–Ω</Select.Option>
                  <Select.Option value="trial">–ü—Ä–æ–±–Ω—ã–π</Select.Option>
                  <Select.Option value="suspended">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</Select.Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="country"
            label="–°—Ç—Ä–∞–Ω–∞"
            rules={[{ required: true }]}
          >
            <Select>
              <Select.Option value="RU">–†–æ—Å—Å–∏—è</Select.Option>
              <Select.Option value="KZ">–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</Select.Option>
              <Select.Option value="BY">–ë–µ–ª–∞—Ä—É—Å—å</Select.Option>
              <Select.Option value="UA">–£–∫—Ä–∞–∏–Ω–∞</Select.Option>
            </Select>
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
              <Button onClick={() => setIsModalOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Ticket Detail Modal */}
      <Modal
        title={`–ó–∞—è–≤–∫–∞ ${selectedTicket?.id}`}
        open={isTicketModalOpen}
        onCancel={() => {
          setIsTicketModalOpen(false)
          setSelectedTicket(null)
          ticketForm.resetFields()
        }}
        footer={null}
        width={700}
      >
        {selectedTicket && (
          <>
            <Descriptions bordered column={1} style={{ marginBottom: 24 }}>
              <Descriptions.Item label="–ü—Ä–æ–µ–∫—Ç">{selectedTicket.tenantName || selectedTicket.tenantId}</Descriptions.Item>
              <Descriptions.Item label="–¢–µ–º–∞">{selectedTicket.subject}</Descriptions.Item>
              <Descriptions.Item label="–û–ø–∏—Å–∞–Ω–∏–µ">{selectedTicket.description}</Descriptions.Item>
              <Descriptions.Item label="–°–æ–∑–¥–∞–Ω–∞">
                {new Date(selectedTicket.createdAt).toLocaleString('ru-RU')}
              </Descriptions.Item>
              <Descriptions.Item label="–û–±–Ω–æ–≤–ª–µ–Ω–∞">
                {new Date(selectedTicket.updatedAt).toLocaleString('ru-RU')}
              </Descriptions.Item>
              {selectedTicket.images && selectedTicket.images.length > 0 && (
                <Descriptions.Item label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
                  <Space>
                    {selectedTicket.images.map((img, idx) => (
                      <Tag key={idx} icon={<UploadOutlined />}>{img}</Tag>
                    ))}
                  </Space>
                </Descriptions.Item>
              )}
            </Descriptions>

            <Form form={ticketForm} onFinish={handleUpdateTicket} layout="vertical">
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item name="status" label="–°—Ç–∞—Ç—É—Å" rules={[{ required: true }]}>
                    <Select>
                      <Select.Option value="new">–ù–æ–≤–∞—è</Select.Option>
                      <Select.Option value="in-progress">–í —Ä–∞–±–æ—Ç–µ</Select.Option>
                      <Select.Option value="resolved">–†–µ—à–µ–Ω–∞</Select.Option>
                      <Select.Option value="closed">–ó–∞–∫—Ä—ã—Ç–∞</Select.Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item name="priority" label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" rules={[{ required: true }]}>
                    <Select>
                      <Select.Option value="low">–ù–∏–∑–∫–∏–π</Select.Option>
                      <Select.Option value="medium">–°—Ä–µ–¥–Ω–∏–π</Select.Option>
                      <Select.Option value="high">–í—ã—Å–æ–∫–∏–π</Select.Option>
                      <Select.Option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</Select.Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item>
                <Space>
                  <Button type="primary" htmlType="submit">
                    –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                  </Button>
                  <Button onClick={() => setIsTicketModalOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
                </Space>
              </Form.Item>
            </Form>
          </>
        )}
      </Modal>
    </div>
  )
}
