# Development Docker Compose Configuration
# Usage: docker-compose -f docker-compose.dev.yml up

version: '3.9'

services:
  # PostgreSQL - Main Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: marketplace
    ports:
      - "5432:5432"
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./Backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./Backend/scripts/site-builder-schema.sql:/docker-entrypoint-initdb.d/02-site-builder.sql
      - ./Backend/scripts/support-tickets-schema.sql:/docker-entrypoint-initdb.d/03-support-tickets.sql
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d marketplace"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - dev-network
    command: redis-server --appendonly yes

  # Elasticsearch - Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-dev-data:/usr/share/elasticsearch/data
    networks:
      - dev-network

  # Kafka Stack
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - dev-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - dev-network

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-dev-data:/data
    command: server /data --console-address ":9001"
    networks:
      - dev-network

  # pgAdmin - PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin-dev-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - dev-network

  # RedisInsight - Redis Management
  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - "8001:8001"
    volumes:
      - redis-insight-data:/db
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge

volumes:
  postgres-dev-data:
  redis-dev-data:
  elasticsearch-dev-data:
  minio-dev-data:
  pgadmin-dev-data:
  redis-insight-data:
